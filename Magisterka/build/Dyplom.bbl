\begin{thebibliography}{10}

\bibitem{wikipediaWikipedia}
{C}++ - {W}ikipedia --- en.wikipedia.org.
\newblock \url{https://en.wikipedia.org/wiki/C%2B%2B}.
\newblock [Dostęp 16-03-2025].

\bibitem{LanguageComparison_3}
{C}omparing {P}rogramming {L}anguages --- cs.ucf.edu.
\newblock \url{https://www.cs.ucf.edu/~leavens/ComS541Fall98/hw-pages/comparing/}.
\newblock [Dostęp 16-03-2025].

\bibitem{nvidiaCUDAToolkit}
{C}{U}{D}{A} {T}oolkit - {F}ree {T}ools and {T}raining --- developer.nvidia.com.
\newblock \url{https://developer.nvidia.com/cuda-toolkit}.
\newblock [Dostęp 22-03-2025].

\bibitem{LanguageComparison_4}
{H}ow do you compare programming languages in a coding interview? --- linkedin.com.
\newblock \url{https://www.linkedin.com/advice/1/how-do-you-compare-programming-languages-coding}.
\newblock [Dostęp 16-03-2025].

\bibitem{nasaParallelBenchmarks}
{N}{A}{S} {P}arallel {B}enchmarks --- nas.nasa.gov.
\newblock \url{https://www.nas.nasa.gov/software/npb.html}.
\newblock [Accessed 17-04-2025].

\bibitem{rustgpuRust}
{R}ust {G}{P}{U} --- rust-gpu.github.io.
\newblock \url{https://rust-gpu.github.io}.
\newblock [Dostęp 22-03-2025].

\bibitem{wikipediaRustprogramming}
{R}ust (programming language) - {W}ikipedia --- en.wikipedia.org.
\newblock \url{https://en.wikipedia.org/wiki/Rust_(programming_language)}.
\newblock [Dostęp 16-03-2025].

\bibitem{ProsAndCons}
{S}afety: {A} comparaison between {R}ust, {C}++ and {G}o | {H}acker {N}ews --- news.ycombinator.com.
\newblock \url{https://news.ycombinator.com/item?id=32285122}.
\newblock [Dostęp 13-03-2025].

\bibitem{docsVulkanoRust}
vulkano - {R}ust --- docs.rs.
\newblock \url{https://docs.rs/vulkano/0.12.0/vulkano/}.
\newblock [Dostęp 22-03-2025].

\bibitem{wgpuWgpuPortable}
wgpu: portable graphics library for {R}ust --- wgpu.rs.
\newblock \url{https://wgpu.rs}.
\newblock [Dostęp 22-03-2025].

\bibitem{CUDA}
{\em Professional CUDA C Programming}.
\newblock Wrox Press Ltd., GBR, wydanie 1st, 2014.

\bibitem{WhenIsParallelismFearlessandZeroCostwithRust?}
J.~Abdi, G.~Posluns, G.~Zhang, B.~Wang, M.~C. Jeffrey.
\newblock When is parallelism fearless and zero-cost with rust?
\newblock {\em Proceedings of the 36th ACM Symposium on Parallelism in Algorithms and Architectures}, SPAA '24, strona 27–40, New York, NY, USA, 2024. Association for Computing Machinery.

\bibitem{LanguageComparison_1}
S.~Ali,  S.~Qayyum.
\newblock A pragmatic comparison of four different programming languages, 06 2021.

\bibitem{LanguageComparison_2}
Z.~Alomari, O.~Halimi, K.~Sivaprasad, C.~Pandit.
\newblock Comparative studies of six programming languages.
\newblock 04 2015.

\bibitem{UnsafeRust}
V.~Astrauskas, C.~Matheja, F.~Poli, P.~M{\"u}ller, A.~J. Summers.
\newblock How do programmers use unsafe rust?
\newblock {\em Proceedings of the ACM on Programming Languages}, 4(OOPSLA):1--27, 2020.

\bibitem{Besozzi}
V.~Besozzi.
\newblock Ppl: Structured parallel programming meets rust.
\newblock {\em 2024 32nd Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP)}, strony 78--87, 2024.

\bibitem{NPBRust}
G.~L. Bessa, L.~M. D.~S. Borela, J.~A. Soares.
\newblock Npb-rust: Nas parallel benchmarks in rust.
\newblock \url{https://github.com/glbessa/NPB-Rust}, 2025.
\newblock Dostęp: 2025-05-18.

\bibitem{rustPolishNames}
J.~Blandy, J.~Orendorff, L.~Tindall.
\newblock {\em Programming Rust}.
\newblock O'Reilly Media, 2021.

\bibitem{IntroductionToConcurrencyAndParallelism}
K.~Bobrov.
\newblock {\em Grokking Concurrency}.
\newblock Manning, 2024.

\bibitem{RustAtomicsAndLocks}
M.~Bos.
\newblock {\em Rust Atomics and Locks: Low-Level Concurrency in Practice}.
\newblock O'Reilly Media, 2022.

\bibitem{bytebytegoEP108Design}
ByteByteGo.
\newblock {E}{P}108: {H}ow do we design a secure system? --- blog.bytebytego.com.
\newblock \url{https://blog.bytebytego.com/p/ep108-how-do-we-design-a-secure-system?utm_campaign=post&utm_medium=web}.
\newblock [Dostęp 09-03-2025].

\bibitem{ProgramminInOpenMp}
R.~Chandra.
\newblock {\em Parallel Programming in OpenMP}.
\newblock High performance computing. Elsevier Science, 2001.

\bibitem{10.1145/3678232.3678258}
T.-C. Chen, M.~Dezani-Ciancaglini, N.~Yoshida.
\newblock On the preciseness of subtyping in session types: 10 years later.
\newblock {\em Proceedings of the 26th International Symposium on Principles and Practice of Declarative Programming}, PPDP '24, New York, NY, USA, 2024. Association for Computing Machinery.

\bibitem{RustPerformance3}
M.~Costanzo, E.~Rucci, M.~Naiouf, A.~De~Giusti.
\newblock Performance vs programming effort between rust and c on multicore architectures: Case study in n-body.
\newblock {\em 2021 XLVII Latin American Computing Conference (CLEI)}, strony 1--10. IEEE, 2021.

\bibitem{rainbow}
R.~DeWolf.
\newblock {I}ntroducing {R}ainbow: {C}ompare the {P}erformance of {D}ifferent {P}rogramming {L}anguages --- medium.com.
\newblock \url{https://medium.com/better-programming/introducing-rainbow-compare-the-performance-of-different-programming-languages-f08a67453cd4 }.
\newblock [Dostęp 16-03-2025].

\bibitem{RustDifferences1}
Z.~Fehervari.
\newblock {R}ust vs {C}++: {M}odern {D}evelopers' {D}ilemma --- bluebirdinternational.com.
\newblock \url{https://bluebirdinternational.com/rust-vs-c/}.
\newblock [Dostęp 28-01-2025].

\bibitem{RustSafety1}
K.~R. Fulton, A.~Chan, D.~Votipka, M.~Hicks, M.~L. Mazurek.
\newblock Benefits and drawbacks of adopting a secure programming language: Rust as a case study.
\newblock {\em Seventeenth Symposium on Usable Privacy and Security (SOUPS 2021)}, strony 597--616, 2021.

\bibitem{MasteringConcurrencyAndParallelProgramming}
M.~Galvin.
\newblock {\em Mastering Concurrency And Parallel Programming: Atain Advanced Techniques and Best Practices for Crafting Robust, Manitainable, and High-Performance Concurrent Code in C++}.
\newblock 2024.

\bibitem{RustDifferences}
Y.~Gusakov.
\newblock {C}++ {V}s. {R}ust: 6 {K}ey {D}ifferences — {Q}{I}{T} --- qit.software.
\newblock \url{https://qit.software/c-vs-rust-6-key-differences/}.
\newblock [Dostęp 28-01-2025].

\bibitem{heyman2020comparison}
H.~Heyman,  L.~Brandefelt.
\newblock A comparison of performance \& implementation complexity of multithreaded applications in rust, java and c++, 2020.

\bibitem{RapidInnovationMasteringRust}
R.~Innovation.
\newblock {M}astering {R}ust {C}oncurrency \& {P}arallelism: {U}ltimate {G}uide 2024 --- rapidinnovation.io.
\newblock \url{https://www.rapidinnovation.io/post/concurrent-and-parallel-programming-with-rust#2-basics-of-rust-for-concurrent-programming}.
\newblock [Dostęp 23-12-2024].

\bibitem{RustSafety3}
R.~Jung, J.-H. Jourdan, R.~Krebbers, D.~Dreyer.
\newblock Safe systems programming in rust.
\newblock {\em Communications of the ACM}, 64(4):144--152, 2021.

\bibitem{TheRustProgrammingLanguage}
S.~Klabnik,  C.~Nichols.
\newblock {\em The Rust Programming Language}.
\newblock No Starch Press, USA, 2018.

\bibitem{GPUSystemComapre}
B.~Köpcke, S.~Gorlatch, M.~Steuwer.
\newblock Descend: A safe gpu systems programming language.
\newblock {\em Proceedings of the ACM on Programming Languages}, 8, 2024.
\newblock Cited by: 0; All Open Access, Gold Open Access, Green Open Access.

\bibitem{RustPerformance2}
S.~Lankes, J.~Breitbart, S.~Pickartz.
\newblock Exploring rust for unikernel development.
\newblock {\em Proceedings of the 10th Workshop on Programming Languages and Operating Systems}, strony 8--15, 2019.

\bibitem{MigratingCtoRustforMemorySafety}
P.~Larsen.
\newblock { Migrating C to Rust for Memory Safety }.
\newblock {\em IEEE Security \& Privacy}, 22(04):22--29, Lip. 2024.

\bibitem{Lesiński}
K.~Lesiński.

\bibitem{RustPerformance4}
Y.~Lin, S.~M. Blackburn, A.~L. Hosking, M.~Norrish.
\newblock Rust as a language for high performance gc implementation.
\newblock {\em ACM SIGPLAN Notices}, 51(11):89--98, 2016.

\bibitem{parallelrustcppIntroductionComparing}
M.~Lindgren.
\newblock {I}ntroduction - {C}omparing parallel {R}ust and {C}++ --- parallel-rust-cpp.github.io.
\newblock \url{https://parallel-rust-cpp.github.io}.
\newblock [Dostęp 28-01-2025].

\bibitem{CPPNPB}
J.~Löff, D.~Griebler, G.~Mencagli, G.~Araujo, M.~Torquati, M.~Danelutto, L.~G. Fernandes.
\newblock The nas parallel benchmarks for evaluating c++ parallel programming frameworks on shared-memory architectures.
\newblock {\em Future Generation Computer Systems}, 125:743--757, 2021.

\bibitem{martins2025npbrustnasparallelbenchmarks}
E.~M. Martins, L.~G. Faé, R.~B. Hoffmann, L.~S. Bianchessi, D.~Griebler.
\newblock Npb-rust: Nas parallel benchmarks in rust, 2025.

\bibitem{mitzenmacher2017probability}
M.~Mitzenmacher,  E.~Upfal.
\newblock {\em Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis}.
\newblock Cambridge University Press, 2017.

\bibitem{ConcurrentSemanticComparison_2}
S.~Nanz, F.~Torshizi, M.~Pedroni, B.~Meyer.
\newblock A comparative study of the usability of two object-oriented concurrent programming languages.
\newblock {\em Information and Software Technology}, 55, 11 2010.

\bibitem{ConcurrentSemanticComparison_1}
S.~Nanz, F.~Torshizi, M.~Pedroni, B.~Meyer.
\newblock Design of an empirical study for comparing the usability of concurrent programming languages.
\newblock {\em Information and Software Technology}, 55(7):1304--1315, 2013.

\bibitem{ParallelProgramming}
P.~Pacheco.
\newblock {\em An Introduction to Parallel Programming}.
\newblock Morgan Kaufmann, 2011.

\bibitem{Paluch}
W.~Paluszynski.
\newblock {S}ystemy {C}zasu {R}zeczywistego i {S}ieci {K}omputerowe - {W}itold {P}aluszynski --- kcir.pwr.edu.pl.
\newblock \url{https://kcir.pwr.edu.pl/~witold/scrsk/#literatura}.
\newblock [Dostęp 10-03-2025].

\bibitem{RustSafety2}
A.~Pinho, L.~Couto, J.~Oliveira.
\newblock Towards rust for critical systems.
\newblock {\em 2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, strony 19--24. IEEE, 2019.

\bibitem{FastFlow}
L.~Rinaldi, M.~Torquati, M.~Danelutto.
\newblock Enforcing reference capability in fastflow with rust.
\newblock {\em Advances in Parallel Computing}, 36:396 – 405, 2020.
\newblock Cited by: 0; All Open Access, Gold Open Access.

\bibitem{FFTPerformance}
M.~P. Rooney,  S.~J. Matthews.
\newblock Evaluating fft performance of the c and rust languages on raspberry pi platforms.
\newblock {\em 2023 57th Annual Conference on Information Sciences and Systems (CISS)}, strony 1--6, 2023.

\bibitem{SecurityInRust}
J.~Sible,  D.~Svoboda.
\newblock Rust software security: A current state assessment.
\newblock Carnegie Mellon University, Software Engineering Institute's Insights (blog), Dec 2022.
\newblock [Dostęp: 2025-Mar-12].

\bibitem{PPL1_2}
T.~Silva, J.~Bispo, T.~Carvalho.
\newblock Foundations for a rust-like borrow checker for c.
\newblock strona 155 – 165, 2024.
\newblock Cited by: 0; All Open Access, Hybrid Gold Open Access.

\bibitem{ZastosowanieWspolbieznosci}
H.~Team.
\newblock {R}ust vs {C}++: {A} {Q}uick {G}uide for {D}evelopers | {H}ostwinds --- hostwinds.com.
\newblock \url{https://www.hostwinds.com/blog/rust-vs-c-a-quick-guide-for-developers}.
\newblock [Dostęp 13-03-2025].

\bibitem{HandsOnConcurrencywithRust}
B.~Troutwine.
\newblock {\em Hands-On Concurrency with Rust: Confidently build memory-safe, parallel, and efficient software in Rust}.
\newblock Packt Publishing, 2018.

\bibitem{ZamiennikWEmbedded}
T.~Vandervelden, R.~De~Smet, D.~Deac, K.~Steenhaut, A.~Braeken.
\newblock Overview of embedded rust operating systems and frameworks.
\newblock {\em Sensors}, 24(17), 2024.
\newblock Cited by: 0; All Open Access, Gold Open Access.

\bibitem{RustPerformance1}
R.~Viitanen.
\newblock Evaluating memory models for graph-like data structures in the rust programming language: Performance and usabiliy, 2020.

\bibitem{ParallelProgramminginC++withOpenMP}
V.~Q.~T. (vuquangtrong@gmail.com).
\newblock {I}ntroduction to {P}arallel {P}rogramming in {C}++ with {O}pen{M}{P} - {S}tephan {O}\&apos;{B}rien --- physics.mcgill.ca.
\newblock \url{https://www.physics.mcgill.ca/~obriens/Tutorials/parallel-cpp/}.
\newblock [Dostęp 23-12-2024].

\bibitem{ConcurrencyInAction}
A.~Williams.
\newblock {\em C++ Concurrency in Action}.
\newblock Manning, 2019.

\bibitem{PPL1_1}
X.~Yin, Z.~Huang, S.~Kan, G.~Shen.
\newblock Safemd: Ownership-based safe memory deallocation for c programs.
\newblock {\em Electronics}, 13(21), 2024.

\bibitem{RustFC}
Z.~Yu, L.~Song, Y.~Zhang.
\newblock Fearless concurrency? understanding concurrent programming safety in real-world rust software.
\newblock {\em arXiv preprint arXiv:1902.01906}, 2019.

\end{thebibliography}
