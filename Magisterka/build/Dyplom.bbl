\begin{thebibliography}{10}

\bibitem{amdahl}
{A}mdahl's law - {W}ikipedia --- en.wikipedia.org.
\newblock \url{https://en.wikipedia.org/wiki/Amdahl%27s_law}.
\newblock [Dostęp 11-06-2025].

\bibitem{wikipediaWikipedia}
{C}++ - {W}ikipedia --- en.wikipedia.org.
\newblock \url{https://en.wikipedia.org/wiki/C%2B%2B}.
\newblock [Dostęp 16-03-2025].

\bibitem{LanguageComparison_3}
{C}omparing {P}rogramming {L}anguages --- cs.ucf.edu.
\newblock \url{https://www.cs.ucf.edu/~leavens/ComS541Fall98/hw-pages/comparing/}.
\newblock [Dostęp 16-03-2025].

\bibitem{HWLOC555}
{C}{P}{U} binding on {M}ac{O}{S} · {I}ssue {\#}555 · open-mpi/hwloc --- github.com.
\newblock \url{https://github.com/open-mpi/hwloc/issues/555}.
\newblock [Dostęp 01-06-2025].

\bibitem{nvidiaCUDAToolkit}
{C}{U}{D}{A} {T}oolkit - {F}ree {T}ools and {T}raining --- developer.nvidia.com.
\newblock \url{https://developer.nvidia.com/cuda-toolkit}.
\newblock [Dostęp 22-03-2025].

\bibitem{cpp26}
{E}xecution control library (since {C}++26) - cppreference.com --- en.cppreference.com.
\newblock \url{https://en.cppreference.com/w/cpp/execution.html}.
\newblock [Dostęp 31-05-2025].

\bibitem{hwlocHardwareLocality}
{H}ardware {L}ocality (hwloc): {H}ardware {L}ocality --- hwloc.readthedocs.io.
\newblock \url{https://hwloc.readthedocs.io/en/stable/}.
\newblock [Dostęp 01-06-2025].

\bibitem{LanguageComparison_4}
{H}ow do you compare programming languages in a coding interview? --- linkedin.com.
\newblock \url{https://www.linkedin.com/advice/1/how-do-you-compare-programming-languages-coding}.
\newblock [Dostęp 16-03-2025].

\bibitem{nasaParallelBenchmarks}
{N}{A}{S} {P}arallel {B}enchmarks --- nas.nasa.gov.
\newblock \url{https://www.nas.nasa.gov/software/npb.html}.
\newblock [Dostęp 17-04-2025].

\bibitem{rustgpuRust}
{R}ust {G}{P}{U} --- rust-gpu.github.io.
\newblock \url{https://rust-gpu.github.io}.
\newblock [Dostęp 22-03-2025].

\bibitem{wikipediaRustprogramming}
{R}ust (programming language) - {W}ikipedia --- en.wikipedia.org.
\newblock \url{https://en.wikipedia.org/wiki/Rust_(programming_language)}.
\newblock [Dostęp 16-03-2025].

\bibitem{ProsAndCons}
{S}afety: {A} comparaison between {R}ust, {C}++ and {G}o | {H}acker {N}ews --- news.ycombinator.com.
\newblock \url{https://news.ycombinator.com/item?id=32285122}.
\newblock [Dostęp 13-03-2025].

\bibitem{docsVulkanoRust}
vulkano - {R}ust --- docs.rs.
\newblock \url{https://docs.rs/vulkano/0.12.0/vulkano/}.
\newblock [Dostęp 22-03-2025].

\bibitem{wgpuWgpuPortable}
wgpu: portable graphics library for {R}ust --- wgpu.rs.
\newblock \url{https://wgpu.rs}.
\newblock [Dostęp 22-03-2025].

\bibitem{CUDA}
{\em Professional {C}{U}{D}{A} {C} {P}rogramming}.
\newblock Wrox Press Ltd., GBR, wydanie 1st, 2014.
\newblock ISBN: 1118739329.

\bibitem{WhenIsParallelismFearlessandZeroCostwithRust?}
J.~Abdi, G.~Posluns, G.~Zhang, B.~Wang, M.~C. Jeffrey.
\newblock When {I}s {P}arallelism {F}earless and {Z}ero-{C}ost with {R}ust?
\newblock {\em Proceedings of the 36th ACM Symposium on Parallelism in Algorithms and Architectures}, SPAA '24, strony 27--40, New York, NY, USA, 2024. Association for Computing Machinery.
\newblock DOI: 10.1145/3626183.3659966.

\bibitem{Adefemi2025Parallelization}
T.~Adefemi.
\newblock What {E}very {C}omputer {S}cientist {N}eeds {T}o {K}now {A}bout {P}arallelization.
\newblock {\em arXiv preprint arXiv:2504.03647}, Luty 2025.
\newblock preprint.

\bibitem{LanguageComparison_1}
S.~Ali,  S.~Qayyum.
\newblock A {P}ragmatic {C}omparison of {F}our {D}ifferent {P}rogramming {L}anguages.
\newblock \url{https://doi.org/10.14293/S2199-1006.1.SOR-.PP5RV1O.v1}, 06 2021.
\newblock [Dostęp 16-03-2025].

\bibitem{LanguageComparison_2}
Z.~Alomari, O.~E. Halimi, K.~Sivaprasad, C.~Pandit.
\newblock Comparative studies of six programming languages.
\newblock \url{https://arxiv.org/abs/1504.00693}, 2015.
\newblock [Dostęp 16-03-2025].

\bibitem{UnsafeRust}
V.~Astrauskas, C.~Matheja, F.~Poli, P.~M{\"u}ller, A.~J. Summers.
\newblock How {D}o {P}rogrammers {U}se {U}nsafe {R}ust?
\newblock {\em Proceedings of the ACM on Programming Languages}, 4(OOPSLA):1--27, 2020.

\bibitem{Besozzi}
V.~Besozzi.
\newblock {P}{P}{L}: {S}tructured {P}arallel {P}rogramming {M}eets {R}ust.
\newblock {\em 2024 32nd Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP)}, strony 78--87, 2024.

\bibitem{NPBRust}
G.~L. Bessa, L.~M. D.~S. Borela, J.~A. Soares.
\newblock {N}{P}{B}-{R}ust: {N}{A}{S} {P}arallel {B}enchmarks in {R}ust.
\newblock \url{https://github.com/glbessa/NPB-Rust}, 2025.
\newblock [Dostęp: 2025-05-18].

\bibitem{rustPolishNames}
J.~Blandy, J.~Orendorff, L.~Tindall.
\newblock {\em Programming {R}ust}.
\newblock O'Reilly Media, 2021.
\newblock ISBN: 9781492052548.

\bibitem{IntroductionToConcurrencyAndParallelism}
K.~Bobrov.
\newblock {\em Grokking {C}oncurrency}.
\newblock Manning, 2024.
\newblock ISBN: 9781633439771.

\bibitem{RustAtomicsAndLocks}
M.~Bos.
\newblock {\em Rust {A}tomics and {L}ocks: {L}ow-{L}evel {C}oncurrency in {P}ractice}.
\newblock O'Reilly Media, 2022.
\newblock ISBN: 9781098119409.

\bibitem{bytebytegoEP108Design}
ByteByteGo.
\newblock {E}{P}108: {H}ow do we design a secure system? --- blog.bytebytego.com.
\newblock \url{https://blog.bytebytego.com/p/ep108-how-do-we-design-a-secure-system?utm_campaign=post&utm_medium=web}.
\newblock [Dostęp: 09-03-2025].

\bibitem{ProgramminInOpenMp}
R.~Chandra.
\newblock {\em Parallel {P}rogramming in {O}pen{M}{P}}.
\newblock High performance computing. Elsevier Science, 2001.

\bibitem{10.1145/3678232.3678258}
T.-C. Chen, M.~Dezani-Ciancaglini, N.~Yoshida.
\newblock On the {P}reciseness of {S}ubtyping in {S}ession {T}ypes: 10 {Y}ears {L}ater.
\newblock {\em Proceedings of the 26th International Symposium on Principles and Practice of Declarative Programming}, PPDP '24, New York, NY, USA, 2024. Association for Computing Machinery.
\newblock DOI: 10.1145/3678232.3678258.

\bibitem{intel2022realtime}
I.~Corporation.
\newblock Best {P}ractices for {R}eal-{T}ime {O}ptimizations {W}ith the 12th {G}eneration {I}ntel\textregistered\ {C}ore\texttrademark\ {P}rocessors.
\newblock Technical paper, Intel Corporation, 2022.
\newblock \url{https://www.intel.com/content/www/us/en/content-details/737973/best-practices-for-real-time-optimizations-with-the-12th-generation-intel-core-processors-technical-paper.html}[Dostęp: 2025-06-11].

\bibitem{RustPerformance3}
M.~Costanzo, E.~Rucci, M.~Naiouf, A.~De~Giusti.
\newblock Performance vs {P}rogramming {E}ffort between {R}ust and {C} on {M}ulticore {A}rchitectures: {C}ase {S}tudy in {N}-{B}ody.
\newblock {\em 2021 XLVII Latin American Computing Conference (CLEI)}, strony 1--10. IEEE, 2021.

\bibitem{rainbow}
R.~DeWolf.
\newblock {I}ntroducing {R}ainbow: {C}ompare the {P}erformance of {D}ifferent {P}rogramming {L}anguages --- medium.com.
\newblock \url{https://medium.com/better-programming/introducing-rainbow-compare-the-performance-of-different-programming-languages-f08a67453cd4 }.
\newblock [Dostęp 16-03-2025].

\bibitem{TBBARMCONCLUSIONS}
J.~Duke.
\newblock Memory {F}orensics {C}omparison of {A}pple {M}1 and {I}ntel {A}rchitecture {U}sing {V}olatility {F}ramework.
\newblock Master's thesis, Louisiana State University, 2021.

\bibitem{RustDifferences1}
Z.~Fehervari.
\newblock {R}ust vs {C}++: {M}odern {D}evelopers' {D}ilemma --- bluebirdinternational.com.
\newblock \url{https://bluebirdinternational.com/rust-vs-c/}.
\newblock [Dostęp 28-01-2025].

\bibitem{flynn1}
M.~J. Flynn.
\newblock Some {C}omputer {O}rganizations and {T}heir {E}ffectiveness.
\newblock {\em IEEE Transactions on Computers}, C-21(9):948--960, 1972.
\newblock [Dostęp 11-06-2025].

\bibitem{RustSafety1}
K.~R. Fulton, A.~Chan, D.~Votipka, M.~Hicks, M.~L. Mazurek.
\newblock Benefits and {D}rawbacks of {A}dopting a {S}ecure {P}rogramming {L}anguage: {R}ust as a {C}ase {S}tudy.
\newblock {\em Seventeenth Symposium on Usable Privacy and Security (SOUPS 2021)}, strony 597--616, 2021.

\bibitem{MasteringConcurrencyAndParallelProgramming}
M.~Galvin.
\newblock {\em Mastering {C}oncurrency {A}nd {P}arallel {P}rogramming: {A}tain {A}dvanced {T}echniques and {B}est {P}ractices for {C}rafting {R}obust, {M}aintainable, and {H}igh-{P}erformance {C}oncurrent {C}ode in {C}++}.
\newblock 2024.

\bibitem{RustDifferences}
Y.~Gusakov.
\newblock {C}++ {V}s. {R}ust: 6 {K}ey {D}ifferences — {Q}{I}{T} --- qit.software.
\newblock \url{https://qit.software/c-vs-rust-6-key-differences/}.
\newblock [Dostęp 28-01-2025].

\bibitem{Hazarika2025RustVsCpp}
P.~Hazarika,  R.~Budania.
\newblock Rust vs {C}++: {P}erformance, {S}afety, and {U}se {C}ases {C}ompared.
\newblock \url{https://www.codeporting.com/blog/rust_vs_cpp_performance_safety_and_use_cases_compared}, 2025.
\newblock Dostęp: 2025-06-12.

\bibitem{heyman2020comparison}
H.~Heyman,  L.~Brandefelt.
\newblock {\em A {C}omparison of {P}erformance \& {I}mplementation {C}omplexity of {M}ultithreaded {A}pplications in {R}ust, {J}ava and {C}++}.
\newblock Praca doktorska, 2020.

\bibitem{RapidInnovationMasteringRust}
R.~Innovation.
\newblock {M}astering {R}ust {C}oncurrency \& {P}arallelism: {U}ltimate {G}uide 2024 --- rapidinnovation.io.
\newblock \url{https://www.rapidinnovation.io/post/concurrent-and-parallel-programming-with-rust#2-basics-of-rust-for-concurrent-programming}.
\newblock [Dostęp: 23-12-2024].

\bibitem{arml2c}
M.~Jalili,  M.~Erez.
\newblock Harvesting {L}2 {C}aches in {S}erver {P}rocessors.
\newblock \url{https://arxiv.org/abs/2301.04228}, 2023.
\newblock [Dostęp: 2025-06-11].

\bibitem{RustSafety3}
R.~Jung, J.-H. Jourdan, R.~Krebbers, D.~Dreyer.
\newblock Safe {S}ystems {P}rogramming in {R}ust.
\newblock {\em Communications of the ACM}, 64(4):144--152, 2021.

\bibitem{TheRustProgrammingLanguage}
S.~Klabnik,  C.~Nichols.
\newblock {\em The {R}ust {P}rogramming {L}anguage}.
\newblock No Starch Press, USA, 2018.
\newblock ISBN: 1593278284.

\bibitem{GPUSystemComapre}
B.~Köpcke, S.~Gorlatch, M.~Steuwer.
\newblock Descend: {A} {S}afe {G}pu {S}ystems {P}rogramming {L}anguage.
\newblock {\em Proceedings of the ACM on Programming Languages}, 8, 2024.
\newblock DOI: 10.1145/3656411.

\bibitem{RustPerformance2}
S.~Lankes, J.~Breitbart, S.~Pickartz.
\newblock Exploring {R}ust for {U}nikernel {D}evelopment.
\newblock {\em Proceedings of the 10th Workshop on Programming Languages and Operating Systems}, strony 8--15, 2019.

\bibitem{MigratingCtoRustforMemorySafety}
P.~Larsen.
\newblock { Migrating {C} to {R}ust for {M}emory {S}afety }.
\newblock {\em IEEE Security \& Privacy}, 22(04):22--29, Lip. 2024.

\bibitem{Lesiński}
K.~Lesiński.
\newblock Speed of {Rust} vs {C}.
\newblock \url{https://kornel.ski/rust-c-speed}, 2019.
\newblock [Dostęp: 10-01-2025].

\bibitem{RustPerformance4}
Y.~Lin, S.~M. Blackburn, A.~L. Hosking, M.~Norrish.
\newblock Rust as a {L}anguage for {H}igh {P}erformance {G}{C} {I}mplementation.
\newblock {\em ACM SIGPLAN Notices}, 51(11):89--98, 2016.

\bibitem{parallelrustcppIntroductionComparing}
M.~Lindgren.
\newblock {I}ntroduction - {C}omparing parallel {R}ust and {C}++ --- parallel-rust-cpp.github.io.
\newblock \url{https://parallel-rust-cpp.github.io}.
\newblock [Dostęp 28-01-2025].

\bibitem{CPPNPB}
J.~Löff, D.~Griebler, G.~Mencagli, G.~Araujo, M.~Torquati, M.~Danelutto, L.~G. Fernandes.
\newblock The {N}{A}{S} {P}arallel {B}enchmarks for evaluating {C}++ parallel programming frameworks on shared-memory architectures.
\newblock {\em Future Generation Computer Systems}, 125:743--757, 2021.
\newblock [Dostęp 17-04-2025].

\bibitem{martins2025npbrustnasparallelbenchmarks}
E.~M. Martins, L.~G. Faé, R.~B. Hoffmann, L.~S. Bianchessi, D.~Griebler.
\newblock {N}{P}{B}-{R}ust: {N}{A}{S} {P}arallel {B}enchmarks in {R}ust.
\newblock \url{https://arxiv.org/abs/2502.15536}, 2025.
\newblock [Dostęp: 2025-05-18].

\bibitem{mitzenmacher2017probability}
M.~Mitzenmacher,  E.~Upfal.
\newblock {\em Probability and {C}omputing: {R}andomization and {P}robabilistic {T}echniques in {A}lgorithms and {D}ata {A}nalysis}.
\newblock Cambridge University Press, 2017.
\newblock ISBN: 9781108107990.

\bibitem{ConcurrentSemanticComparison_1}
S.~Nanz, F.~Torshizi, M.~Pedroni, B.~Meyer.
\newblock Design of an {E}mpirical {S}tudy for {C}omparing the {U}sability of {C}oncurrent {P}rogramming {L}anguages.
\newblock {\em Information and Software Technology}, 55(7):1304--1315, 2013.

\bibitem{ConcurrentSemanticComparison_2}
S.~Nanz, F.~Torshizi, M.~Pedroni, B.~Meyer.
\newblock Design of an empirical study for comparing the usability of concurrent programming languages.
\newblock {\em Information and Software Technology}, 55(7):1304--1315, Lip. 2013.
\newblock [Dostęp 16-03-2025].

\bibitem{ParallelProgramming}
P.~Pacheco.
\newblock {\em An {I}ntroduction to {P}arallel {P}rogramming}.
\newblock Morgan Kaufmann, 2011.

\bibitem{Paluch}
W.~Paluszynski.
\newblock {S}ystemy {C}zasu {R}zeczywistego i {S}ieci {K}omputerowe - {W}itold {P}aluszynski --- kcir.pwr.edu.pl.
\newblock \url{https://kcir.pwr.edu.pl/~witold/scrsk/#literatura}.
\newblock [Dostęp: 10-03-2025].

\bibitem{RustSafety2}
A.~Pinho, L.~Couto, J.~Oliveira.
\newblock Towards {R}ust for {C}ritical {S}ystems.
\newblock {\em 2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, strony 19--24. IEEE, 2019.

\bibitem{FastFlow}
L.~Rinaldi, M.~Torquati, M.~Danelutto.
\newblock Enforcing {R}eference {C}apability in {F}ast{F}low with {R}ust.
\newblock {\em Advances in Parallel Computing}, 36:396 -- 405, 2020.

\bibitem{FFTPerformance}
M.~P. Rooney,  S.~J. Matthews.
\newblock Evaluating {F}{F}{T} performance of the {C} and {R}ust {L}anguages on {R}aspberry {P}i platforms.
\newblock {\em 2023 57th Annual Conference on Information Sciences and Systems (CISS)}, strony 1--6, 2023.
\newblock [Dostęp 16-03-2025].

\bibitem{Saligrama2019RustConcurrency}
A.~Saligrama, A.~Shen, J.~Gjengset.
\newblock A {P}ractical {A}nalysis of {R}ust's {C}oncurrency {S}tory.
\newblock {\em arXiv preprint arXiv:1904.12210}, Kwi. 2019.
\newblock [Dostęp: 12-06-2025].

\bibitem{Sesay2024Parallelism}
I.~M. Sesay.
\newblock The {C}ritical {R}ole of {P}arallelism and {M}ulticore {P}rocessors in {A}dvancing {H}igh-{L}evel {P}rogramming {P}ractices.
\newblock {\em Global Science Journal}, Wrze. 2024.
\newblock [Dostęp: 2025-06-12].

\bibitem{10876950}
M.~Shehryar,  F.~H. Khan.
\newblock State-of-the-{A}rt {M}ulti-{C}ore {A}rchitectures: {A}nalyzing {C}urrent {R}esearch, {I}dentifying {G}aps, and {E}xploring {F}uture {D}irections.
\newblock {\em 2024 21st International Bhurban Conference on Applied Sciences and Technology (IBCAST)}, strony 163--168, 2024.
\newblock [Dostęp 12-06-2025].

\bibitem{SecurityInRust}
J.~Sible,  D.~Svoboda.
\newblock Rust {S}oftware {S}ecurity: {A} {C}urrent {S}tate {A}ssessment.
\newblock \url{https://doi.org/10.58012/0px4-9n81}, Dec 2022.
\newblock [Dostęp: 12-03-2025].

\bibitem{PPL1_2}
T.~Silva, J.~Bispo, T.~Carvalho.
\newblock Foundations for a {R}ust-{L}ike {B}orrow {C}hecker for {C}.
\newblock strony 155 -- 165, 2024.
\newblock [Dostęp 16-03-2025].

\bibitem{ZastosowanieWspolbieznosci}
H.~Team.
\newblock {R}ust vs {C}++: {A} {Q}uick {G}uide for {D}evelopers | {H}ostwinds --- hostwinds.com.
\newblock \url{https://www.hostwinds.com/blog/rust-vs-c-a-quick-guide-for-developers}.
\newblock [Dostęp 13-03-2025].

\bibitem{HandsOnConcurrencywithRust}
B.~Troutwine.
\newblock {\em Hands-{O}n {C}oncurrency with {R}ust: {C}onfidently build memory-safe, parallel, and efficient software in {R}ust}.
\newblock Packt Publishing, 2018.
\newblock ISBN: 9781788478359.

\bibitem{ARMTBB}
A.~Tuby,  A.~Morrison.
\newblock Reverse {E}ngineering the {A}pple {M}1 {C}onditional {B}ranch {P}redictor for {O}ut-of-{P}lace {S}pectre {M}istraining.
\newblock \url{https://arxiv.org/abs/2502.10719}, 2025.
\newblock [Dostęp: 2025-05-18].

\bibitem{DoD2023MemorySafe}
{U.S. {D}epartment of {D}efense {C}hief {I}nformation {O}fficer}.
\newblock The {C}ase for {M}emory-{S}afe {R}oadmaps.
\newblock \url{https://media.defense.gov/2023/Dec/06/2003352724/-1/-1/0/THE-CASE-FOR-MEMORY-SAFE-ROADMAPS-TLP-CLEAR.PDF}, December 2023.
\newblock [Dostęp: 12-06-2025].

\bibitem{ZamiennikWEmbedded}
T.~Vandervelden, R.~De~Smet, D.~Deac, K.~Steenhaut, A.~Braeken.
\newblock Overview of {E}mbedded {R}ust {O}perating {S}ystems and {F}rameworks.
\newblock {\em Sensors}, 24(17), 2024.
\newblock [Dostęp: 23-12-2024].

\bibitem{RustPerformance1}
R.~Viitanen.
\newblock {\em Evaluating {M}emory {M}odels for {G}raph-{L}ike {D}ata {S}tructures in the {R}ust {P}rogramming {L}anguage: {P}erformance and {U}sabiliy}.
\newblock Praca doktorska, 2020.

\bibitem{ParallelProgramminginC++withOpenMP}
V.~Q.~T. (vuquangtrong@gmail.com).
\newblock {I}ntroduction to {P}arallel {P}rogramming in {C}++ with {O}pen{M}{P} - {S}tephan {O}\&apos;{B}rien --- physics.mcgill.ca.
\newblock \url{https://www.physics.mcgill.ca/~obriens/Tutorials/parallel-cpp/}.
\newblock [Dostęp: 23-12-2024].

\bibitem{ConcurrencyInAction}
A.~Williams.
\newblock {\em C++ {C}oncurrency in {A}ction}.
\newblock Manning, 2019.
\newblock ISBN: 9781638356356.

\bibitem{PPL1_1}
X.~Yin, Z.~Huang, S.~Kan, G.~Shen.
\newblock Safe{M}{D}: {O}wnership-{B}ased {S}afe {M}emory {D}eallocation for {C} {P}rograms.
\newblock {\em Electronics}, 13(21), 2024.
\newblock [Dostęp 16-03-2025].

\bibitem{RustFC}
Z.~Yu, L.~Song, Y.~Zhang.
\newblock Fearless {C}oncurrency? {U}nderstanding {C}oncurrent {P}rogramming {S}afety in {R}eal-{W}orld {R}ust {S}oftware.
\newblock \url{https://arxiv.org/abs/1902.01906}, 2019.
\newblock [Dostęp 28-01-2025].

\end{thebibliography}
