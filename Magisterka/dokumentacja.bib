%1
@book{mitzenmacher2017probability,
  title={Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis},
  author={Mitzenmacher, M. and Upfal, E.},
  isbn={9781108107990},
  url={https://books.google.pl/books?id=5tUoDwAAQBAJ},
  year={2017},
  publisher={Cambridge University Press}
}
%2
@book{TheRustProgrammingLanguage,
  author = {Klabnik, Steve and Nichols, Carol},
  title = {The Rust Programming Language},
  year = {2018},
  isbn = {1593278284},
  publisher = {No Starch Press},
  address = {USA}
}
%3
@book{HandsOnConcurrencywithRust,
  title={Hands-On Concurrency with Rust: Confidently build memory-safe, parallel, and efficient software in Rust},
  author={Troutwine, B.L.},
  isbn={9781788478359},
  url={https://books.google.pl/books?id=FHxeDwAAQBAJ},
  year={2018},
  publisher={Packt Publishing}
}
%4
@book{RustAtomicsAndLocks,
  title={Rust Atomics and Locks: Low-Level Concurrency in Practice},
  author={Bos, M.},
  isbn={9781098119409},
  url={https://books.google.pl/books?id=jPqhEAAAQBAJ},
  year={2022},
  publisher={O'Reilly Media}
}
%5
@book{MasteringConcurrencyAndParallelProgramming,
  title={Mastering Concurrency And Parallel Programming: Atain Advanced Techniques and Best Practices for Crafting Robust, Manitainable, and High-Performance Concurrent Code in C++},
  author={Matthew Galvin},
  isbn={9798326727572},
  url={},
  year={2024},
  publisher={}
}
%6
@misc{ParallelProgramminginC++withOpenMP,
  author = {Vũ Quang Trọng (vuquangtrong@gmail.com)},
  title = {{I}ntroduction to {P}arallel {P}rogramming in {C}++ with {O}pen{M}{P} - {S}tephan {O}\&apos;{B}rien --- physics.mcgill.ca},
  howpublished = {\url{https://www.physics.mcgill.ca/~obriens/Tutorials/parallel-cpp/}},
  year = {},
  note = {[Dostęp 23-12-2024]},
}
%7
@book{ConcurrencyInAction,
  title={C++ Concurrency in Action},
  author={Williams, A.},
  isbn={9781638356356},
  url={https://books.google.pl/books?id=BzgzEAAAQBAJ},
  year={2019},
  publisher={Manning}
}
%8
@book{ProgramminInOpenMp,
  title={Parallel Programming in OpenMP},
  author={Chandra, R.},
  isbn={9781558606715},
  lccn={00043828},
  series={High performance computing},
  url={https://books.google.pl/books?id=18CmnqIhbhUC},
  year={2001},
  publisher={Elsevier Science}
}
%9
@misc{RapidInnovationMasteringRust,
	author = {Rapid Innovation},
	title = {{M}astering {R}ust {C}oncurrency \& {P}arallelism: {U}ltimate {G}uide 2024 --- rapidinnovation.io},
	howpublished = {\url{https://www.rapidinnovation.io/post/concurrent-and-parallel-programming-with-rust#2-basics-of-rust-for-concurrent-programming}},
	year = {},
	note = {[Dostęp 23-12-2024]},
}

@inproceedings{10.1145/3678232.3678258,
  author = {Chen, Tzu-Chun and Dezani-Ciancaglini, Mariangiola and Yoshida, Nobuko},
  title = {On the Preciseness of Subtyping in Session Types: 10 Years Later},
  year = {2024},
  isbn = {9798400709692},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3678232.3678258},
  doi = {10.1145/3678232.3678258},
  abstract = {The PPDP Most Influential Paper 10-Year Award for our work&nbsp;[11] was a delightful surprise. We subsequently reviewed the subsequent literature to see how our results have been utilised. This short note aims to capture crucial references without missing too many.},
  booktitle = {Proceedings of the 26th International Symposium on Principles and Practice of Declarative Programming},
  articleno = {2},
  numpages = {3},
  keywords = {π -calculus, Session types, Soundness and Completeness, Subtyping},
  location = {Milano, Italy},
  series = {PPDP '24}
}

@ARTICLE{ZamiennikWEmbedded,
	author = {Vandervelden, Thibaut and De Smet, Ruben and Deac, Diana and Steenhaut, Kris and Braeken, An},
	title = {Overview of Embedded Rust Operating Systems and Frameworks},
	year = {2024},
	journal = {Sensors},
	volume = {24},
	number = {17},
	doi = {10.3390/s24175818},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85203869090&doi=10.3390%2fs24175818&partnerID=40&md5=33ec1f280a710122d80b3020dd5fe952},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}

@ARTICLE{GPUSystemComapre,
	author = {Köpcke, Bastian and Gorlatch, Sergei and Steuwer, Michel},
	title = {Descend: A safe gpu systems programming language},
	year = {2024},
	journal = {Proceedings of the ACM on Programming Languages},
	volume = {8},
	doi = {10.1145/3656411},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85196889256&doi=10.1145%2f3656411&partnerID=40&md5=7e62e394af867f152334535cb3daa309},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access, Green Open Access}
}

@inproceedings{WhenIsParallelismFearlessandZeroCostwithRust?,
  author = {Abdi, Javad and Posluns, Gilead and Zhang, Guozheng and Wang, Boxuan and Jeffrey, Mark C.},
  title = {When Is Parallelism Fearless and Zero-Cost with Rust?},
  year = {2024},
  isbn = {9798400704161},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3626183.3659966},
  doi = {10.1145/3626183.3659966},
  abstract = {The Rust programming language is lauded for enabling fearless concurrency with zero cost: detecting concurrency errors at compile time. Given the enduring difficulty of parallel programming in other languages, this implied panacea warrants analysis. In particular, the efficacy of Rust across types of parallelism remains unexplored. Is parallel programming always devoid of fear with Rust? We answer this question through a case study, porting 14 benchmarks with abundant regular and irregular parallelism from C++ to Rust and reporting our experience and observations. We find that Rust, with the Rayon library, indeed delivers fearlessness for program phases comprising only regular parallelism, e.g., prefix-sum. However, for applications with any irregular parallelism, the programmer must choose between unsafe code or high-overhead dynamic checks with errors that manifest at run time, leaving the arduous task of parallel programming as scary with Rust as with its predecessors.},
  booktitle = {Proceedings of the 36th ACM Symposium on Parallelism in Algorithms and Architectures},
  pages = {27–40},
  numpages = {14},
  keywords = {fearless concurrency, irregular parallelism, regular parallelism, rust, zero-cost abstraction},
  location = {Nantes, France},
  series = {SPAA '24}
}

@misc{RustDifferences,
	author = {Yegor Gusakov},
	title = {{C}++ {V}s. {R}ust: 6 {K}ey {D}ifferences — {Q}{I}{T} --- qit.software},
	howpublished = {\url{https://qit.software/c-vs-rust-6-key-differences/}},
	year = {},
	note = {[Dostęp 28-01-2025]},
}

@misc{RustDifferences1,
	author = {Zoltan Fehervari},
	title = {{R}ust vs {C}++: {M}odern {D}evelopers' {D}ilemma --- bluebirdinternational.com},
	howpublished = {\url{https://bluebirdinternational.com/rust-vs-c/}},
	year = {},
	note = {[Dostęp 28-01-2025]},
}

@inproceedings{RustSafety1,
  title={Benefits and drawbacks of adopting a secure programming language: Rust as a case study},
  author={Fulton, Kelsey R and Chan, Anna and Votipka, Daniel and Hicks, Michael and Mazurek, Michelle L},
  booktitle={Seventeenth Symposium on Usable Privacy and Security (SOUPS 2021)},
  pages={597--616},
  year={2021}
}

@inproceedings{RustSafety2,
  title={Towards rust for critical systems},
  author={Pinho, Andr{\'e} and Couto, Luis and Oliveira, Jos{\'e}},
  booktitle={2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)},
  pages={19--24},
  year={2019},
  organization={IEEE}
}

@article{RustSafety3,
  title={Safe systems programming in Rust},
  author={Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  journal={Communications of the ACM},
  volume={64},
  number={4},
  pages={144--152},
  year={2021},
  publisher={ACM New York, NY, USA}
}

@article{UnsafeRust,
  title={How do programmers use unsafe rust?},
  author={Astrauskas, Vytautas and Matheja, Christoph and Poli, Federico and M{\"u}ller, Peter and Summers, Alexander J},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={OOPSLA},
  pages={1--27},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@article{RustFC,
  title={Fearless concurrency? understanding concurrent programming safety in real-world rust software},
  author={Yu, Zeming and Song, Linhai and Zhang, Yiying},
  journal={arXiv preprint arXiv:1902.01906},
  year={2019}
}

@misc{RustPerformance1,
  title={Evaluating Memory Models for Graph-Like Data Structures in the Rust Programming Language: Performance and Usabiliy},
  author={Viitanen, Rasmus},
  year={2020}
}

@inproceedings{RustPerformance2,
  title={Exploring rust for unikernel development},
  author={Lankes, Stefan and Breitbart, Jens and Pickartz, Simon},
  booktitle={Proceedings of the 10th Workshop on Programming Languages and Operating Systems},
  pages={8--15},
  year={2019}
}

@inproceedings{RustPerformance3,
  title={Performance vs programming effort between rust and c on multicore architectures: Case study in n-body},
  author={Costanzo, Manuel and Rucci, Enzo and Naiouf, Marcelo and De Giusti, Armando},
  booktitle={2021 XLVII Latin American Computing Conference (CLEI)},
  pages={1--10},
  year={2021},
  organization={IEEE}
}

@article{RustPerformance4,
  title={Rust as a language for high performance GC implementation},
  author={Lin, Yi and Blackburn, Stephen M and Hosking, Antony L and Norrish, Michael},
  journal={ACM SIGPLAN Notices},
  volume={51},
  number={11},
  pages={89--98},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@misc{parallelrustcppIntroductionComparing,
	author = {Matias Lindgren},
	title = {{I}ntroduction - {C}omparing parallel {R}ust and {C}++ --- parallel-rust-cpp.github.io},
	howpublished = {\url{https://parallel-rust-cpp.github.io}},
	year = {},
	note = {[Dostęp 28-01-2025]},
}

@ARTICLE{FastFlow,
	author = {Rinaldi, Luca and Torquati, Massimo and Danelutto, Marco},
	title = {Enforcing reference capability in FastFlow with rust},
	year = {2020},
	journal = {Advances in Parallel Computing},
	volume = {36},
	pages = {396 – 405},
	doi = {10.3233/APC200064},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083066249&doi=10.3233%2fAPC200064&partnerID=40&md5=9d13800137f18a8c8a6cb1cf4f415689},
	type = {Conference paper},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 0; All Open Access, Gold Open Access}
}